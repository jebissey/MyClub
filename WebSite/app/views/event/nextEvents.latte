{layout '../layout.latte'}

{block title}Ev√®nements{/block}

{block head}
<style>
.attribute-badge {
    display: inline-block;
    width: 20px;
    height: 20px;
    margin-right: 5px;
    border-radius: 4px;
    cursor: help;
    border: 1px solid rgba(0,0,0,0.2);
}
</style>
{/block}

{block navbar}
    {include '../navbar/home.latte'}
{/block}

{block content}
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="mb-0">
        {if $person != false}
            {='eventsAvailableForYou'|translate}
        {else}
            {='eventsAvailableForAll'|translate}
        {/if}
        </h1>
        {if $isEventManager}
        <div class="ms-auto">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#eventModal">
                <i class="bi bi-plus-lg"></i>
            </button>
        </div>
        {/if}
    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>{='type'|translate}</th>
                <th>{='summary'|translate}</th>
                <th>{='location'|translate}</th>
                <th>{='date_time'|translate}</th>
                <th>{='duration'|translate}</th>
                <th>{='attributes'|translate}</th>
                <th>{='participants'|translate}</th>
                <th>{='audience'|translate}</th>
            </tr>
        </thead>
        <tbody>
            {foreach $events as $event}
            <tr onclick="window.location.href='/events/{$event['id']}';" style="cursor: pointer;">
                <td>{$event['eventTypeName']} {if $event['groupName']}({$event['groupName']}){/if}</td>
                <td>{$event['summary']}</td>
                <td>{$event['location']}</td>
                <td>{=$event['startTime']|longDateTime}</td>
                <td>{$event['duration']}</td>
                <td>
                {if count($event['attributes']) > 0}
                    {foreach $event['attributes'] as $attribute}
                    <span 
                        class="attribute-badge" 
                        style="background-color: {$attribute['color']|noescape};"
                        title="{$attribute['name']} - {$attribute['detail']}"
                    ></span>
                    {/foreach}
                {else}
                    Aucun attribut
                {/if}
                </td>
                <td>{$event['participants']}{if $event['maxParticipants'] > 0} / {$event['maxParticipants']}{/if}{if isset($event['booked'])}üë§{/if}</td>
                <td>{=$event['audience']|translate}</td>
            </tr>
            {/foreach}
        </tbody>
    </table>

    <div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="eventModalLabel">G√©rer un √©v√©nement</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <form id="eventForm">
                        <input type="hidden" id="eventId" name="eventId">
                        <input type="hidden" id="formMode" name="formMode" value="create">

                        <div class="mb-3">
                            <label for="summaryInput" class="form-label">R√©sum√©</label>
                            <input type="text" class="form-control" id="summaryInput" name="summary" required>
                        </div>

                        <div class="mb-3">
                            <label for="descriptionInput" class="form-label">Description</label>
                            <textarea class="form-control" id="descriptionInput" name="description" required></textarea>
                        </div>

                        <div class="mb-3">
                            <label for="locationInput" class="form-label">Lieu</label>
                            <input type="text" class="form-control" id="locationInput" name="location" required>
                        </div>

                        <div class="mb-3">
                            <label for="eventTypeInput" class="form-label">Type d'√©v√©nement</label>
                            <select class="form-control" id="eventTypeInput" name="eventType" required>
                                {foreach $eventTypes as $eventType}
                                    <option value="{$eventType['Id']}">{$eventType['Name']}</option>
                                {/foreach}
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="dateInput" class="form-label">Date</label>
                            <input type="date" class="form-control" id="dateInput" name="date" required>
                        </div>

                        <div class="mb-3">
                            <label for="startTimeInput" class="form-label">Heure de d√©but</label>
                            <input type="time" class="form-control" id="startTimeInput" name="startTime" step="900" required>
                        </div>

                        <div class="mb-3">
                            <label for="durationInput" class="form-label">Dur√©e (en heures)</label>
                            <input type="number" class="form-control" id="durationInput" name="duration" min="0.5" step="0.5" required>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Attributs</label>
                            <div id="attributesList" class="mb-2">
                                <!-- Dynamically populated attribute list will go here -->
                            </div>
                            <div class="input-group">
                                <select id="availableAttributesSelect" class="form-control">
                                    {foreach $eventAttributes as $attribute}
                                    <option value="{$attribute['Id']}" data-color="{$attribute['Color']}" data-detail="{$attribute['Detail']}">
                                        {$attribute['Name']}
                                    </option>
                                    {/foreach}
                                </select>
                                <button type="button" id="addAttributeBtn" class="btn btn-secondary">
                                    <i class="bi bi-plus-lg"></i> Ajouter
                                </button>
                            </div>
                        </div>

                        <button type="submit" id="submitEventBtn" class="btn btn-success">Cr√©er</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
{/block}

{block scripts}
<script n:syntax="off">
    document.addEventListener('DOMContentLoaded', function() {
        const eventModal = document.getElementById('eventModal');
        const eventForm = document.getElementById('eventForm');
        const submitButton = document.getElementById('submitEventBtn');
        const formMode = document.getElementById('formMode');
        const eventId = document.getElementById('eventId');
        
        let selectedAttributes = [];
        
        const eventTypeInput = document.getElementById('eventTypeInput');
        eventTypeInput.addEventListener('change', function() {
            const selectedEventTypeId = this.value;
            if (selectedEventTypeId) {
                loadAttributesByEventType(selectedEventTypeId);
            } else {
                availableAttributesSelect.innerHTML = '<option value="">S√©lectionnez d\'abord un type d\'√©v√©nement</option>';
            }
        });

        const availableAttributesSelect = document.getElementById('availableAttributesSelect');
        function loadAttributesByEventType(eventTypeId) {
            availableAttributesSelect.innerHTML = '<option value="">Chargement...</option>';
            
            fetch(`/api/attributes-by-event-type/${eventTypeId}`)
                .then(response => response.json())
                .then(data => {
                    availableAttributesSelect.innerHTML = '';
                    
                    if (data.attributes && data.attributes.length > 0) {
                        data.attributes.forEach(attribute => {
                            const option = document.createElement('option');
                            option.value = attribute.Id;
                            option.textContent = attribute.Name;
                            option.dataset.color = attribute.Color;
                            option.dataset.detail = attribute.Detail;
                            availableAttributesSelect.appendChild(option);
                        });
                    } else {
                        const option = document.createElement('option');
                        option.value = "";
                        option.textContent = "Aucun attribut disponible";
                        availableAttributesSelect.appendChild(option);
                    }
                })
                .catch(error => {
                    availableAttributesSelect.innerHTML = '<option value="">Erreur de chargement</option>';
                });
        }

        function openCreateModal() {
            modalTitle.textContent = 'Cr√©er un √©v√©nement';
            submitButton.textContent = 'Cr√©er';
            formMode.value = 'create';
            eventForm.reset();
            selectedAttributes = [];
            document.getElementById('attributesList').innerHTML = '';

            availableAttributesSelect.innerHTML = '<option value="">S√©lectionnez d\'abord un type d\'√©v√©nement</option>';

            new bootstrap.Modal(eventModal).show();
        }

        function openUpdateModal(event) {
            modalTitle.textContent = 'Mettre √† jour l\'√©v√©nement';
            submitButton.textContent = 'Mettre √† jour';
            formMode.value = 'update';
            eventId.value = event.Id;

            document.getElementById('summaryInput').value = event.Summary;
            document.getElementById('descriptionInput').value = event.Description;
            document.getElementById('locationInput').value = event.Location;
            document.getElementById('eventTypeInput').value = event.IdEventType;

            // Charger les attributs correspondant au type d'√©v√©nement
            loadAttributesByEventType(event.IdEventType);

            const startDate = new Date(event.StartTime);
            const endDate = new Date(event.EndTime);
            document.getElementById('dateInput').value = startDate.toISOString().split('T')[0];
            document.getElementById('startTimeInput').value = startDate.toTimeString().split(' ')[0].slice(0, 5);
            const durationHours = (endDate - startDate) / (1000 * 60 * 60);
            document.getElementById('durationInput').value = durationHours.toFixed(1);

            const attributesList = document.getElementById('attributesList');
            attributesList.innerHTML = '';
            selectedAttributes = [];

            if (event.attributes) {
                event.attributes.forEach(attr => {
                    const attributeElement = createAttributeElement(attr.Id, attr.Name, attr.Color, attr.Detail);
                    attributesList.appendChild(attributeElement);
                    selectedAttributes.push({
                        id: attr.Id,
                        name: attr.Name,
                        color: attr.Color,
                        detail: attr.Detail
                    });
                });
            }

            new bootstrap.Modal(eventModal).show();
        }

        function createAttributeElement(attributeId, attributeName, attributeColor, attributeDetail) {
            const attributeElement = document.createElement('span');
            attributeElement.className = 'badge me-2 mb-2 position-relative';
            attributeElement.style.backgroundColor = attributeColor;
            attributeElement.style.color = getContrastYIQ(attributeColor);
            attributeElement.innerHTML = `
                ${attributeName}
                <button type="button" class="btn-close position-absolute top-0 end-0" 
                    aria-label="Supprimer" 
                    data-attribute-id="${attributeId}"></button>
            `;
            attributeElement.style.position = 'relative';
            attributeElement.style.paddingRight = '25px';

            attributeElement.setAttribute('title', attributeDetail);
            attributeElement.classList.add('tooltip-trigger');

            const removeBtn = attributeElement.querySelector('.btn-close');
            removeBtn.addEventListener('click', function () {
                const idToRemove = this.dataset.attributeId;
                selectedAttributes = selectedAttributes.filter(attr => attr.id !== idToRemove);
                attributeElement.remove();
            });

            return attributeElement;
        }

        document.getElementById('addAttributeBtn').addEventListener('click', function () {
            const select = document.getElementById('availableAttributesSelect');
            const selectedOption = select.options[select.selectedIndex];
            if (!selectedOption || !selectedOption.value) return;

            const attributeId = selectedOption.value;
            const attributeName = selectedOption.text;
            const attributeColor = selectedOption.dataset.color;
            const attributeDetail = selectedOption.dataset.detail;

            if (selectedAttributes.some(attr => attr.id === attributeId)) {
                alert('Cet attribut a d√©j√† √©t√© ajout√©.');
                return;
            }

            const attributeElement = createAttributeElement(attributeId, attributeName, attributeColor, attributeDetail);
            document.getElementById('attributesList').appendChild(attributeElement);
            selectedAttributes.push({
                id: attributeId,
                name: attributeName,
                color: attributeColor,
                detail: attributeDetail
            });
        });
    });

    function getContrastYIQ(hexcolor) {
        hexcolor = hexcolor.replace("#", "");
        const r = parseInt(hexcolor.substr(0,2),16);
        const g = parseInt(hexcolor.substr(2,2),16);
        const b = parseInt(hexcolor.substr(4,2),16);
        const yiq = ((r*299)+(g*587)+(b*114))/1000;
        return (yiq >= 128) ? 'black' : 'white';
    }
</script>
{/block}