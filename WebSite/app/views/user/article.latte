{layout '../layout.latte'}

{block title}Articles{/block}

{block navbar}
    {include '../navbar/home.latte'}
{/block}

{block head}
    {if $canEdit}
        <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
        <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
        <style>
            button.ql-clearbreak {
                font-weight: bold;
                font-size: 16px;
            }
            .clearbreak-display, .ql-clearbreak {
                clear: both !important;
                display: block !important;
                width: 100% !important;
                height: 1px !important; 
                margin: 10px 0 !important;
                padding: 0 !important;
                float: none !important;
                position: relative !important;
                border-bottom: none !important; 
                background-color: transparent; 
            }
            .clearbreak-display + * {
                clear: both !important;
                display: block;
            }
            .ql-editor {
                min-height: 300px;
            }
            #editor-container {
                display: none;
            }
            .card-body img {
                max-width: 100%;
                height: auto;
                display: block;
                margin: 0 auto;
            }
            .ql-editor img, #content-display img {
                float: left;
                margin-right: 10px;
                margin-bottom: 5px;
                max-width: 100%;
                height: auto;
            }
            #content-display p, .ql-editor p {
                margin-top: 0;
                margin-bottom: 1em;
            }
            .ql-clearbreak {
                clear: both !important;
                display: block !important;
                width: 100% !important;
                height: 1px !important;
                margin: 10px 0 !important;
                border-bottom: 1px dashed #ccc !important;
                padding: 0 !important;
                float: none !important;
                position: relative !important;
            }
            .ql-clearbreak + * {
                clear: both;
            }
            button.ql-clearbreak:hover {
                background-color: #f0f0f0;
            }
        </style>
    {/if}
{/block}

{block content}
    <div id="liveAlertPlaceholder"></div>
    <div class="container">
        {if isset($messages['success'])}
        <div class="alert alert-success alert-dismissible">
            {$messages['success']}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        {/if}
        {if isset($messages['error'])}
        <div class="alert alert-danger alert-dismissible">
            {$messages['error']}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        {/if}

        {if $chosenArticle}
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="card-title" id="article-title-display">{$chosenArticle->Title}</h2>
                    <small class="text-muted">
                        Créé par {$chosenArticle->FirstName} {$chosenArticle->LastName} 
                        le {date('d/m/Y', strtotime($chosenArticle->Timestamp))}
                        {if isset($chosenArticle->Published) && $chosenArticle->Published}
                            <span class="badge bg-success">Publié</span>
                        {else}
                            <span class="badge bg-secondary">Non publié</span>
                        {/if}
                        {if isset($chosenArticle->GroupName) && $chosenArticle->GroupName}
                            <span class="badge bg-info">Groupe: {$chosenArticle->GroupName}</span>
                        {/if}
                    </small>
                </div>
                {if $canEdit}
                <button id="edit-toggle-btn" class="btn btn-primary">Modifier</button>
                    {if $hasSurvey}
                <a href="/surveys/add/{$id}" class="btn btn-success">Modifier le sondage</a>
                <button id="show-survey-results-btn" class="btn btn-info" onclick="window.location.href='/surveys/results/{$chosenArticle->Id}'">Voir résultats sondage</button>
                    {else}
                <a href="/surveys/add/{$id}" class="btn btn-success">Ajouter un sondage</a>
                    {/if}
                {/if}
                <a href="/articles" class="btn btn-secondary">Retour à la liste</a>
            </div>
            <div class="card-body">
                <div id="content-display">
                    {$chosenArticle->Content|noescape}
                </div>
                
                {if $canEdit}
                <div id="editor-container">
                    <form id="edit-form" method="post">
                        <div class="d-flex align-items-center gap-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="published-input" name="published" value="1" 
                                    {if isset($chosenArticle->Published) && $chosenArticle->Published}checked{/if}>
                                <label class="form-check-label" for="published-input">
                                    Publier
                                </label>
                            </div>

                            <div class="d-flex align-items-center gap-2">
                                <label for="group-select" class="form-label mb-0 text-nowrap">Groupe associé</label>
                                <select class="form-select" id="group-select" name="idGroup">
                                    <option value="">-- Aucun groupe --</option>
                                    {foreach $groups as $group}
                                    <option value="{$group['Id']}" {if isset($chosenArticle->IdGroup) && $chosenArticle->IdGroup == $group['Id']}selected{/if}>{$group['Name']}</option>
                                    {/foreach}
                                </select>
                            </div>

                            {if $canEdit}
                                <div class="d-flex gap-2 ms-auto">
                                    <button id="save-btn" class="btn btn-success" style="display: none;">Enregistrer</button>
                                    <button id="cancel-btn" class="btn btn-secondary" style="display: none;">Annuler</button>
                                </div>
                            {/if}
                        </div>
                        <hr class="w-100 my-3">
                        <div class="d-flex gap-2 align-items-end">
                            <label for="title-input" class="form-label">Titre</label>
                            <input type="text" class="form-control" id="title-input" name="title" value="{$chosenArticle->Title}">
                        </div>
                        <div class="mb-3">
                            <label for="quill-editor" class="form-label">Contenu</label>
                            <div id="quill-editor"></div>
                            <input type="hidden" name="content" id="content-input">
                        </div>
                    </form>
                </div>
                {/if}
                {if $hasSurvey && $userConnected && isset($chosenArticle->Published) && $chosenArticle->Published}
                <button id="reply-survey-btn" class="btn btn-success">Répondre au sondage</button>
                {/if}
            </div>
        </div>
        {else}
        <div class="alert alert-info">
            Aucun article disponible.
        </div>
        {/if}
        
        {if count($latestArticleTitles) > 0}
            <h3>Articles récents</h3>
            <ul class="list-group">
                {foreach $latestArticleTitles as $article}
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <a href="/articles/{$article->Id}">{$article->Title}</a>
                        <span class="badge bg-secondary rounded-pill">
                            {date('d/m/Y', strtotime($article->Timestamp))}
                        </span>
                    </li>
                {/foreach}
            </ul>
        {/if}
    </div>

    <div class="modal fade" id="surveyModal" tabindex="-1" aria-labelledby="surveyModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="surveyModalLabel">Répondre au sondage</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="survey-form-container">
                    <p>Chargement du sondage...</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                    <button type="button" class="btn btn-primary" id="submit-survey">Envoyer</button>
                </div>
            </div>
        </div>
    </div>
{/block}

{block scripts}
    <script>
        {if $canEdit}
            document.addEventListener('DOMContentLoaded', function() {
                const BlockEmbed = Quill.import('blots/block/embed');
                
                class ClearBreakBlot extends BlockEmbed {
                    static create() {
                        const node = super.create();
                        node.setAttribute('data-clearbreak', 'true');
                        return node;
                    }
                }
                ClearBreakBlot.blotName = 'clearBreak';
                ClearBreakBlot.tagName = 'DIV';
                ClearBreakBlot.className = 'clearbreak-display';
                Quill.register(ClearBreakBlot);

                var quill = new Quill('#quill-editor', {
                    theme: 'snow',
                    modules: {
                        toolbar: [
                            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                            ['bold', 'italic', 'underline', 'strike'],
                            [{ 'color': [] }, { 'background': [] }],
                            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                            ['link', 'image'],
                        ]
                    }
                });

                const toolbar = quill.getModule('toolbar');
                const toolbarEl = toolbar.container;
                const imageGroup = toolbarEl.querySelector('.ql-image').parentNode;
                const clearBreakButton = document.createElement('button');
                clearBreakButton.className = 'ql-clearbreak';
                clearBreakButton.type = 'button';
                clearBreakButton.title = 'Saut après image';
                clearBreakButton.innerHTML = '↵';
                clearBreakButton.style.fontWeight = 'bold';
                imageGroup.appendChild(clearBreakButton);
                
                clearBreakButton.addEventListener('click', function() {
                    const range = quill.getSelection();
                    if (range) {
                        quill.insertEmbed(range.index, 'clearBreak', true);
                        quill.setSelection(range.index + 1, 0);
                    }
                });
                
                quill.getModule("toolbar").addHandler("image", function () {
                    const input = document.createElement("input");
                    input.setAttribute("type", "file");
                    input.setAttribute("accept", "image/*");
                    input.click();

                    input.onchange = async function () {
                        const file = input.files[0];
                        if (file) {
                            const resizedImage = await resizeImage(file);
                            const range = quill.getSelection();
                            if (range) {
                                quill.insertEmbed(range.index, "image", resizedImage);
                                quill.setSelection(range.index + 1, 0);
                            }
                        }
                    };
                });

                quill.root.addEventListener('click', function(event) {
                    const images = quill.root.querySelectorAll('img');
                    for (const img of images) {
                        const rect = img.getBoundingClientRect();
                        
                        if (event.clientX > rect.right && event.clientX < rect.right + 20 && 
                            event.clientY >= rect.top && event.clientY <= rect.bottom) {
                            const imageIndex = getImageIndexInQuill(quill, img);
                            if (imageIndex !== -1) {
                                quill.setSelection(imageIndex + 1, 0);
                                event.preventDefault();
                                return;
                            }
                        }
                        
                        if (event.clientY > rect.bottom && event.clientY < rect.bottom + 20 &&
                            event.clientX >= rect.left && event.clientX <= rect.right) {
                            const imageIndex = getImageIndexInQuill(quill, img);
                            if (imageIndex !== -1) {
                                quill.setSelection(imageIndex + 1, 0);
                                event.preventDefault();
                                return;
                            }
                        }
                    }
                });

                function getImageIndexInQuill(quill, imgElement) {
                    const ops = quill.getContents().ops;
                    let currentIndex = 0;
                    let imgSrc = imgElement.getAttribute('src');
                    
                    for (const op of ops) {
                        if (op.insert && op.insert.image) {
                            if (op.insert.image === imgSrc) {
                                return currentIndex;
                            }
                            currentIndex++;
                        } else if (op.insert) {
                            currentIndex += op.insert.length || 1;
                        }
                    }
                    
                    return -1; // Image non trouvée
                }

                var contentDisplay = document.getElementById('content-display');
                var initialContent = contentDisplay.innerHTML;
                
                quill.clipboard.dangerouslyPasteHTML(initialContent);
                
                var editToggleBtn = document.getElementById('edit-toggle-btn');
                var saveBtn = document.getElementById('save-btn');
                var cancelBtn = document.getElementById('cancel-btn');
                var editorContainer = document.getElementById('editor-container');
                var titleDisplay = document.getElementById('article-title-display');
                var titleInput = document.getElementById('title-input');
                var editForm = document.getElementById('edit-form');
                var contentInput = document.getElementById('content-input');
                
                editToggleBtn.addEventListener('click', function() {
                    contentDisplay.style.display = 'none';
                    editorContainer.style.display = 'block';
                    editToggleBtn.style.display = 'none';
                    saveBtn.style.display = 'inline-block';
                    cancelBtn.style.display = 'inline-block';
                    titleDisplay.style.display = 'none';
                });
                
                saveBtn.addEventListener('click', function() {
                    var content = quill.root.innerHTML;
                    contentInput.value = content;
                    editForm.submit();
                });
                
                cancelBtn.addEventListener('click', function() {
                    contentDisplay.style.display = 'block';
                    editorContainer.style.display = 'none';
                    editToggleBtn.style.display = 'inline-block';
                    saveBtn.style.display = 'none';
                    cancelBtn.style.display = 'none';
                    titleDisplay.style.display = 'block';
                    
                    quill.clipboard.dangerouslyPasteHTML(initialContent);
                    titleInput.value = titleDisplay.textContent;
                });
            });

            function resizeImage(file, maxWidth = 1024, maxHeight = 1024) {
                return new Promise((resolve) => {
                    const img = new Image();
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        img.src = e.target.result;
                    };

                    img.onload = () => {
                        let { width, height } = img;

                        if (width > maxWidth || height > maxHeight) {
                            const canvas = document.createElement("canvas");
                            const ctx = canvas.getContext("2d");

                            const scale = Math.min(maxWidth / width, maxHeight / height);
                            width = Math.round(width * scale);
                            height = Math.round(height * scale);

                            canvas.width = width;
                            canvas.height = height;
                            ctx.drawImage(img, 0, 0, width, height);

                            resolve(canvas.toDataURL("image/jpeg", 0.9));
                        } else {
                            resolve(img.src);
                        }
                    };
                    reader.readAsDataURL(file);
                });
            }

        {/if}
        const ARTICLE_ID = {$chosenArticle->Id};
    </script>
    <script n:syntax="off">
        document.addEventListener('DOMContentLoaded', function() {
            const replySurveyBtn = document.getElementById('reply-survey-btn');
            if (replySurveyBtn) {
                replySurveyBtn.addEventListener('click', function() {
                    const surveyModal = new bootstrap.Modal(document.getElementById('surveyModal'));
                    
                    fetch(`/api/surveys/reply/${ARTICLE_ID}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const container = document.getElementById('survey-form-container');
                                let html = `
                                    <form id="survey-form">
                                        <input type="hidden" name="survey_id" value="${data.survey.id}">
                                        <input type="hidden" name="user_email" value="{$userEmail}">
                                        <h4>${data.survey.question}</h4>
                                        <div class="mb-3">
                                `;
                                data.survey.options.forEach(option => {
                                    const isChecked = data.survey.previousAnswers && 
                                        data.survey.previousAnswers.includes(option) ? 'checked' : '';
                                    html += `
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" 
                                                name="survey_answers" 
                                                value="${option}" 
                                                id="option-${option.replace(/\s+/g, '-')}"
                                                ${isChecked}>
                                            <label class="form-check-label" for="option-${option.replace(/\s+/g, '-')}">
                                                ${option}
                                            </label>
                                        </div>
                                    `;
                                });
                                html += `
                                        </div>
                                        <div class="text-center">
                                            <button type="button" id="submit-survey" class="btn btn-primary">
                                                ${data.survey.previousAnswers ? 'Mettre à jour' : 'Répondre'}
                                            </button>
                                        </div>
                                    </form>
                                `;
                                container.innerHTML = html;

                                document.getElementById('submit-survey').addEventListener('click', function() {
                                    const selectedOptions = Array.from(
                                        document.querySelectorAll('input[name="survey_answers"]:checked')
                                    ).map(checkbox => checkbox.value);
                                    
                                    if (selectedOptions.length === 0) {
                                        alert('Veuillez sélectionner au moins une option.');
                                        return;
                                    }
                                    const formData = {
                                        survey_id: document.querySelector('input[name="survey_id"]').value,
                                        survey_answers: selectedOptions,
                                    };
                                    fetch('/api/surveys/reply', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify(formData)
                                    })
                                    .then(response => response.json())
                                    .then(result => {
                                        if (result.success) {
                                            appendAlert('Votre réponse a été enregistrée avec succès.', 'info');
                                            surveyModal.hide();
                                        } else {
                                            appendAlert('Erreur_1 : '+ result.message, 'danger');
                                        }
                                    })
                                    .catch(error => {
                                        appendAlert('Erreur_2 : ' + error, 'danger');
                                    });
                                });
                                
                                surveyModal.show();
                            } else {
                                appendAlert('Erreur_3 : ' + data.message, 'danger');
                            }
                        })
                        .catch(error => {
                            appendAlert('Erreur_4 : ', error, 'danger');
                        });
                });
                
                document.getElementById('submit-survey').addEventListener('click', function() {
                    const form = document.getElementById('survey-form');
                    const surveyId = form.querySelector('input[name="survey_id"]').value;
                    
                    const checkboxes = form.querySelectorAll('input[name="survey_answers"]:checked');
                    const answers = Array.from(checkboxes).map(checkbox => checkbox.value);
                    
                    if (answers.length === 0) {
                        alert('Veuillez sélectionner au moins une option.');
                        return;
                    }
                    
                    fetch('/api/surveys/reply', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            survey_id: surveyId,
                            answers: answers
                        }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            bootstrap.Modal.getInstance(document.getElementById('surveyModal')).hide();
                            appendAlert('Votre réponse a été enregistrée. Merci!', 'info');
                        } else {
                            appendAlert('Erreur: ' + data.message, 'danger');
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        alert('Une erreur est survenue lors de l\'enregistrement de votre réponse.');
                    });
                });
            }
        });
    </script>
{/block}